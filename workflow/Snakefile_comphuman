# Snakefile
import os
import pandas as pd

# Define samples
# define permanent things
KSIZE = 21
GTDB = '/group/ctbrowngrp/sourmash-db/gtdb-rs214/gtdb-rs214-k21.zip'
GTDB_TAX  = '/group/ctbrowngrp/sourmash-db/gtdb-rs214/gtdb-rs214.lineages.csv'
configfile: "../config/config.yaml"

# Set samples for human and pig and microbe species
metadata_human = pd.read_csv(config['human_SRA'], usecols=['acc'])
metadata_pig = pd.read_csv(config['pig_SRA'], usecols=['acc'])
metadata_pang = pd.read_csv(config['pang_species'], usecols=['species'])

# Create a list of run ids
samples_human = metadata_human['acc'].tolist()
samples_pig = metadata_pig['acc'].tolist()
pangenome_species = metadata_pang['species'].tolist()

# Define samples
HUMAN_METAG = config.get('samples', samples_human)
PIG_METAG = config.get('samples', samples_pig)
PANG_SPECIES = config.get('species', pangenome_species)

# # replace spaces with underscores
def format_species_name(species):
    return species.replace(' ', '_')

# for creatong the dmp files
# we want all signatures of metaGs x one microbial species
def calc_hash_input_human(wildcards):
    files = expand("/group/ctbrowngrp/irber/data/wort-data/wort-sra/sigs/{metag}.sig", metag=HUMAN_METAG)
    with open("input_files_human.txt", "w") as f:
        for file in files:
            f.write(f"{file}\n")
    return "input_files_human.txt"

def calc_hash_input_pig(wildcards):
    files = expand("/group/ctbrowngrp2/scratch/annie/2024-pigparadigm/results/sourmash/sketches/read_s100/{metag}.sig.gz", metag=PIG_METAG)
    with open("input_files_pig.txt", "w") as f:
        for file in files:
            f.write(f"{file}\n")
    return "input_files_pig.txt"

# Get input for signatures, either human or pig
# Human are in wort data, pig are in own sketch files
def get_input_file_path(metag):
    if metag in samples_human:
        return "/group/ctbrowngrp/irber/data/wort-data/wort-sra/sigs/{metag}.sig"
    elif metag in samples_pig:
        return "/group/ctbrowngrp2/scratch/annie/2023-swine-sra/sourmash/sig_files/sketch_reads_s100/{metag}.sig.gz"
    else:
        raise ValueError(f"Unknown sample type: {metag}")

# Function to determine the output directory based on the sample type
def get_output_dir(metag):
    if metag in samples_human:
        return "compare_human"
    elif metag in samples_pig:
        return "compare_pig"
    else:
        raise ValueError(f"Unknown sample type: {metag}")

# include rules
include: "rules/pangenome.smk"

rule all: 
    input:
        expand("../results/pangenome/dmp/{species}.cmp.tsv", 
        species=[format_species_name(species) for species in PANG_SPECIES]),
        expand("../results/pangenome/dmp_human/{species}.x.human.dump", 
        species=[format_species_name(species) for species in PANG_SPECIES]),
        expand("../results/pangenome/pangenome_sketch/{species}.pang.sig.gz", 
        species=[format_species_name(species) for species in PANG_SPECIES]),
        # expand('../results/pangenome/{folder_species}/{species}x{metag}.txt', 
        # species=[format_species_name(species) for species in PANG_SPECIES], 
        # folder_species=[get_output_dir(sample) for sample in HUMAN_METAG], metag=HUMAN_METAG,)
        # expand('../results/pangenome/{folder_species}/{species}x{metag}.txt', 
        # species=[format_species_name(species) for species in PANG_SPECIES], 
        # folder_species=[get_output_dir(sample) for sample in PIG_METAG], metag=PIG_METAG,)



